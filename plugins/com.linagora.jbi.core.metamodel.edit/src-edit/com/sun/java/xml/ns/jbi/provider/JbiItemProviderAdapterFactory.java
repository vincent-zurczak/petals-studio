/******************************************************************************
 * Copyright (c) 2009-2019, Linagora
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * 		Linagora - initial API and implementation
 *******************************************************************************/
 
package com.sun.java.xml.ns.jbi.provider;

import com.sun.java.xml.ns.jbi.util.JbiAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class JbiItemProviderAdapterFactory extends JbiAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public JbiItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.sun.java.xml.ns.jbi.ClassPath} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClassPathItemProvider classPathItemProvider;

	/**
	 * This creates an adapter for a {@link com.sun.java.xml.ns.jbi.ClassPath}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClassPathAdapter() {
		if (classPathItemProvider == null) {
			classPathItemProvider = new ClassPathItemProvider(this);
		}

		return classPathItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.sun.java.xml.ns.jbi.Component} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentItemProvider componentItemProvider;

	/**
	 * This creates an adapter for a {@link com.sun.java.xml.ns.jbi.Component}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentAdapter() {
		if (componentItemProvider == null) {
			componentItemProvider = new ComponentItemProvider(this);
		}

		return componentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.sun.java.xml.ns.jbi.ComponentClassName} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentClassNameItemProvider componentClassNameItemProvider;

	/**
	 * This creates an adapter for a {@link com.sun.java.xml.ns.jbi.ComponentClassName}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentClassNameAdapter() {
		if (componentClassNameItemProvider == null) {
			componentClassNameItemProvider = new ComponentClassNameItemProvider(this);
		}

		return componentClassNameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.sun.java.xml.ns.jbi.Connection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConnectionItemProvider connectionItemProvider;

	/**
	 * This creates an adapter for a {@link com.sun.java.xml.ns.jbi.Connection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConnectionAdapter() {
		if (connectionItemProvider == null) {
			connectionItemProvider = new ConnectionItemProvider(this);
		}

		return connectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.sun.java.xml.ns.jbi.Connections} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConnectionsItemProvider connectionsItemProvider;

	/**
	 * This creates an adapter for a {@link com.sun.java.xml.ns.jbi.Connections}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConnectionsAdapter() {
		if (connectionsItemProvider == null) {
			connectionsItemProvider = new ConnectionsItemProvider(this);
		}

		return connectionsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.sun.java.xml.ns.jbi.Consumer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConsumerItemProvider consumerItemProvider;

	/**
	 * This creates an adapter for a {@link com.sun.java.xml.ns.jbi.Consumer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConsumerAdapter() {
		if (consumerItemProvider == null) {
			consumerItemProvider = new ConsumerItemProvider(this);
		}

		return consumerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.sun.java.xml.ns.jbi.DocumentRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentRootItemProvider documentRootItemProvider;

	/**
	 * This creates an adapter for a {@link com.sun.java.xml.ns.jbi.DocumentRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentRootAdapter() {
		if (documentRootItemProvider == null) {
			documentRootItemProvider = new DocumentRootItemProvider(this);
		}

		return documentRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.sun.java.xml.ns.jbi.Identification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IdentificationItemProvider identificationItemProvider;

	/**
	 * This creates an adapter for a {@link com.sun.java.xml.ns.jbi.Identification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIdentificationAdapter() {
		if (identificationItemProvider == null) {
			identificationItemProvider = new IdentificationItemProvider(this);
		}

		return identificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.sun.java.xml.ns.jbi.Jbi} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JbiItemProvider jbiItemProvider;

	/**
	 * This creates an adapter for a {@link com.sun.java.xml.ns.jbi.Jbi}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJbiAdapter() {
		if (jbiItemProvider == null) {
			jbiItemProvider = new JbiItemProvider(this);
		}

		return jbiItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.sun.java.xml.ns.jbi.Services} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServicesItemProvider servicesItemProvider;

	/**
	 * This creates an adapter for a {@link com.sun.java.xml.ns.jbi.Services}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServicesAdapter() {
		if (servicesItemProvider == null) {
			servicesItemProvider = new ServicesItemProvider(this);
		}

		return servicesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.sun.java.xml.ns.jbi.Consumes} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConsumesItemProvider consumesItemProvider;

	/**
	 * This creates an adapter for a {@link com.sun.java.xml.ns.jbi.Consumes}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConsumesAdapter() {
		if (consumesItemProvider == null) {
			consumesItemProvider = new ConsumesItemProvider(this);
		}

		return consumesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.sun.java.xml.ns.jbi.Provides} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProvidesItemProvider providesItemProvider;

	/**
	 * This creates an adapter for a {@link com.sun.java.xml.ns.jbi.Provides}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProvidesAdapter() {
		if (providesItemProvider == null) {
			providesItemProvider = new ProvidesItemProvider(this);
		}

		return providesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.sun.java.xml.ns.jbi.Provider} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProviderItemProvider providerItemProvider;

	/**
	 * This creates an adapter for a {@link com.sun.java.xml.ns.jbi.Provider}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProviderAdapter() {
		if (providerItemProvider == null) {
			providerItemProvider = new ProviderItemProvider(this);
		}

		return providerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.sun.java.xml.ns.jbi.ServiceAssembly} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceAssemblyItemProvider serviceAssemblyItemProvider;

	/**
	 * This creates an adapter for a {@link com.sun.java.xml.ns.jbi.ServiceAssembly}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceAssemblyAdapter() {
		if (serviceAssemblyItemProvider == null) {
			serviceAssemblyItemProvider = new ServiceAssemblyItemProvider(this);
		}

		return serviceAssemblyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.sun.java.xml.ns.jbi.ServiceUnit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceUnitItemProvider serviceUnitItemProvider;

	/**
	 * This creates an adapter for a {@link com.sun.java.xml.ns.jbi.ServiceUnit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceUnitAdapter() {
		if (serviceUnitItemProvider == null) {
			serviceUnitItemProvider = new ServiceUnitItemProvider(this);
		}

		return serviceUnitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.sun.java.xml.ns.jbi.SharedLibraryType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SharedLibraryTypeItemProvider sharedLibraryTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.sun.java.xml.ns.jbi.SharedLibraryType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSharedLibraryTypeAdapter() {
		if (sharedLibraryTypeItemProvider == null) {
			sharedLibraryTypeItemProvider = new SharedLibraryTypeItemProvider(this);
		}

		return sharedLibraryTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.sun.java.xml.ns.jbi.SharedLibraryType1} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SharedLibraryType1ItemProvider sharedLibraryType1ItemProvider;

	/**
	 * This creates an adapter for a {@link com.sun.java.xml.ns.jbi.SharedLibraryType1}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSharedLibraryType1Adapter() {
		if (sharedLibraryType1ItemProvider == null) {
			sharedLibraryType1ItemProvider = new SharedLibraryType1ItemProvider(this);
		}

		return sharedLibraryType1ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.sun.java.xml.ns.jbi.Target} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TargetItemProvider targetItemProvider;

	/**
	 * This creates an adapter for a {@link com.sun.java.xml.ns.jbi.Target}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTargetAdapter() {
		if (targetItemProvider == null) {
			targetItemProvider = new TargetItemProvider(this);
		}

		return targetItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (classPathItemProvider != null) classPathItemProvider.dispose();
		if (componentItemProvider != null) componentItemProvider.dispose();
		if (componentClassNameItemProvider != null) componentClassNameItemProvider.dispose();
		if (connectionItemProvider != null) connectionItemProvider.dispose();
		if (connectionsItemProvider != null) connectionsItemProvider.dispose();
		if (consumerItemProvider != null) consumerItemProvider.dispose();
		if (documentRootItemProvider != null) documentRootItemProvider.dispose();
		if (identificationItemProvider != null) identificationItemProvider.dispose();
		if (jbiItemProvider != null) jbiItemProvider.dispose();
		if (servicesItemProvider != null) servicesItemProvider.dispose();
		if (consumesItemProvider != null) consumesItemProvider.dispose();
		if (providesItemProvider != null) providesItemProvider.dispose();
		if (providerItemProvider != null) providerItemProvider.dispose();
		if (serviceAssemblyItemProvider != null) serviceAssemblyItemProvider.dispose();
		if (serviceUnitItemProvider != null) serviceUnitItemProvider.dispose();
		if (sharedLibraryTypeItemProvider != null) sharedLibraryTypeItemProvider.dispose();
		if (sharedLibraryType1ItemProvider != null) sharedLibraryType1ItemProvider.dispose();
		if (targetItemProvider != null) targetItemProvider.dispose();
	}

}
