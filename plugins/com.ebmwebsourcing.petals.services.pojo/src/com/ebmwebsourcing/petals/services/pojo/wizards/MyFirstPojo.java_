/**
 * Copyright (c) 2011-2018, Linagora
 *
 * Requires libs:
 * - petals-cdk-api
 * - petals-cdk-core
 * - petals-cdk-jbidescriptor
 * - petals-jbi
 */
package com.linagora.formation;

import java.io.StringReader;
import java.io.StringWriter;

import javax.jbi.component.ComponentContext;
import javax.xml.namespace.QName;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;

import org.ow2.petals.component.framework.api.Message.MEPConstants;
import org.ow2.petals.component.framework.api.message.Exchange;
import org.ow2.petals.component.framework.jbidescriptor.generated.Consumes;
import org.ow2.petals.component.framework.listener.AbstractJBIListener;
import org.w3c.dom.Document;

/**
 * A sample Petals POJO.
 * @author Pierre-Yves Gibello - Linagora
 * @author Vincent Zurczak - Linagora
 */
public class MyFirstPojo {

	private AbstractJBIListener jbiListener;
	private ComponentContext ctx;

	
	/**
	 * @param jbiListener
	 */
	public void setJBIListener( AbstractJBIListener jbiListener ) {
		this.jbiListener = jbiListener;
	}

	
	/**
	 * @param ctx
	 */
	public void setComponentContext( ComponentContext ctx ) {
		this.ctx = ctx;
	}

	
	/**
	 * Processes the exchange.
	 * @param exchange
	 * @return
	 * @throws Exception
	 */
	public boolean onExchange( Exchange exchange ) throws Exception {
	
		// Print information about the incoming message
		this.jbiListener.getLogger().info( "Target interface: " + formatQName( exchange.getInterfaceName()));
		this.jbiListener.getLogger().info( "Target service: " + formatQName( exchange.getInterfaceName()));
		this.jbiListener.getLogger().info( "Target end-point: " + exchange.getInterfaceName());
		this.jbiListener.getLogger().info( "Target operation: " + formatQName( exchange.getOperation()));
		this.jbiListener.getLogger().info( "MEP: " + exchange.getExchangePattern());
		
		// Print the exchange content
		Document doc = exchange.getInMessageContentAsDocument();
		TransformerFactory tf = TransformerFactory.newInstance();
		Transformer transformer = tf.newTransformer();
		transformer.setOutputProperty( OutputKeys.OMIT_XML_DECLARATION, "yes" );
		
		StringWriter writer = new StringWriter();
		transformer.transform( new DOMSource( doc ), new StreamResult( writer ));
		this.jbiListener.getLogger().info( "XML Content:\n\n" + writer.toString() + "\n" );
		
		// Print the properties
		for( String s : exchange.getInMessagePropertyNames()) {
			String value = String.valueOf( exchange.getInMessageProperty( s ));
			this.jbiListener.getLogger().info( "In Message Property: " + s + " = " + value );
		}
		
		// Print attachment names
		for( String s : exchange.getInMessageAttachmentNames()) {
			this.jbiListener.getLogger().info( "In Attachment: " + s );
		}

		// Consume a sample service
		Consumes ep = new Consumes();
		ep.setInterfaceName( new QName( "http://petals.test.com", "WriteContentInterface" ));
		ep.setServiceName( new QName( "http://petals.test.com", "WriteContent" ));
		ep.setEndpointName("TestFileEndpoint");

		System.out.println( "POJO: before consume" );
		Exchange out = this.jbiListener.createConsumeExchange( ep, MEPConstants.IN_ONLY_PATTERN );
		out.setInMessageContent( new StreamSource( new StringReader( "<pojo>Hello from Pojo !</pojo>" )));

		this.jbiListener.sendSync( out );
		this.jbiListener.getLogger().info( "POJO: consume done" );

		// Answer if needed (In[Optional]Out)
		if( exchange.isInOutPattern() 
				|| exchange.isInOptionalOutPattern()) {
			
			this.jbiListener.getLogger().info( "POJO: sending response" );
			exchange.setOutMessageContent( new StreamSource( new StringReader( "<pojo>Ok</pojo>" )));
		}

		return true;
	}

	
	/**
	 * Initializes the POJO instance.
	 */
	public void init() {
		this.jbiListener.getLogger().info("SamplePojo inits.");
	}
	
	
	/**
	 * Formats a QName to ease its readability.
	 * @param qname (not null)
	 * @return a non-null string
	 */
	private String formatQName( QName qname ) {
		String s = qname.getLocalPart();
		if( qname.getNamespaceURI() != null 
				&& qname.getNamespaceURI().trim().length() > 0 )
			s += " [ " + qname.getNamespaceURI() + " ]";
		
		return s;
		
	}
}