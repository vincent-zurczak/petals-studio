#############################################
# Properties for ${COMPONENT_NAME} ${VERSION}
#############################################


# The model version, independent of the component version.
# Type: String, required
version = 1.0

# Other properties.
# Property names are in lower case and should use dots as word separator.
#
#
# Comments preceding property names are used at runtime.
# A comment describes the property for a user. It ends with the type description.
# Possible types: String, Integer, Float, Double, Long, Boolean, Enumeration, List
#
# A property can be mandatory.
# Type: String, required
#
#
# A property can be marked as "nullable".
# Nullable only makes sense for a required field.
# If a required field has no value and that it is nullable, it will have the "null" value.
# Type: String, required, nullable
#
# Notice "nullable" does not make sense with properties, but is necessary if we want to generate some XML files.
# Thanks XML! Special thought for Petals' jbi.xml files. ;)
#
#
# Ranges can be specified for integers.
# Type: Integer [1,10]
# Type: Integer ]1,10]
# Type: Integer [5, ]
# Type: Integer [,5]
#
#
# Enumerations can be specified.
# Items are separated by a semicolon.
# Type: Enumeration{ item1 ; item2 ; item3 }


# Default values are indicated in the properties.
# Properties without type are considered to be strings.
my.property = myDefaultValue

# No value means null.
# So, the following property indicates a string property "myProperty2" which is null by default.
myProperty2 = 

# The empty string can be used through a special key word (case matters).
my.property3 = EMPTY STRING

# List means the value of a property is a list of strings separated by the | symbol
# Type: List
my.property4 = item1 | item 2 | item3\
| item 4 on the next line 
